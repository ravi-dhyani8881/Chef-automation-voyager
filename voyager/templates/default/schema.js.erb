export const typeDefs = `#graphql
    "used for Voyager entry point"
    type Root {
        query: Query
    }

    type Advanced {
        fieldName: String
        values: [Values]
    } 

    type Values {
        name: String
        count: Int
    }

<% @graph.each do |table| %>
    <% table.each do |table_name, table_info| %>
    type Query {
        find<%= table_name.capitalize %>ByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): <%= table_name %>Response
    }

    type <%= table_name %>Response {
        start: String
        row: String
        statusCode: Int
        totalRecords: Int
        advanced: [Advanced]
        records: [Records<%= table_name %>]
    }
    
   type Records<%= table_name.capitalize %> {
        <% table_info['fields'].each do |field| %>
            <%= field['name'] %>: <%= case field['type'].downcase
                             when 'string' then 'String'
                             when 'date' then 'DateTime'
                             when 'int' then 'Int'
                             else field['type'].capitalize
                           end %>
        <% end %>

        <% table_info['relations'].each do |relation| %>
            <% relation['table'].each do |related_table| %>
            find<%= related_table['name'].capitalize %>ByQuery(query: String, start: String, rows: String, filterField: String, filterQuery: String, sort: String, advanceField: String, advanceQuery: String, advance: String, field: String ): <%= related_table['name'] %>Response
            <% end %>
        <% end %>
    }

    <% end %>
<% end %>
`;
